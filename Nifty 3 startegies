//@version=6
// Created by digitaljobnews-hash & eatapple990-cmyk
// TBH Pure Supertrend Trailing Logic - Performance Table Fixed + Bias Confluence
// Current Date and Time (UTC): 2025-09-30 06:29:54
// Current User: saranghaeyokv-bot
// UPDATED: Added candle closure signals + ATR trailing for TBH & Breakout
indicator('Nifty New + Bias', overlay=true, max_bars_back=501, max_lines_count=400)

// ═════════════════════════════════════════════════════════════════
// NORMAL CANDLE DATA FOR PNL CALCULATION - FIXED
// ═════════════════════════════════════════════════════════════════

// Get the base ticker without HA prefix
base_ticker = str.replace(syminfo.tickerid, "HA:", "")
normal_close = request.security(base_ticker, timeframe.period, close, lookahead=barmerge.lookahead_off)
normal_high = request.security(base_ticker, timeframe.period, high, lookahead=barmerge.lookahead_off) 
normal_low = request.security(base_ticker, timeframe.period, low, lookahead=barmerge.lookahead_off)
normal_open = request.security(base_ticker, timeframe.period, open, lookahead=barmerge.lookahead_off)

// ═════════════════════════════════════════════════════════════════
// STRATEGY ENABLE/DISABLE TOGGLES
// ═════════════════════════════════════════════════════════════════

enable_bb_strategy = input.bool(false, title="✅ Enable Bollinger Band Reversal Strategy", group="Strategy Toggles")
enable_breakout_strategy = input.bool(false, title="✅ Enable Breakout Strategy", group="Strategy Toggles")
enable_tbh_strategy = input.bool(true, title="✅ Enable Top Bottom Hunter Strategy", group="Strategy Toggles")

// BIAS CONFLUENCE TOGGLE
enable_bias_confluence = input.bool(true, title="✅ Enable Nifty Bias Confluence", tooltip="Requires BULL bias for BUY signals and BEAR bias for SELL signals", group="Strategy Toggles")

// TIME SLOT EXCLUSION SETTINGS
enable_time_exclusion = input.bool(false, title="🚫 Enable Time Slot Exclusion", tooltip="Blocks trades during poor performance time slots", group="Strategy Toggles")

// ENHANCED OVERLAP FILTER
enable_overlap_filter = input.bool(true, title="✅ Enable Signal Overlap Filter", tooltip="Prevents multiple strategy signals when any strategy has active trade", group="Strategy Toggles")
enable_315_exit = input.bool(true, title="✅ Enable 3:15 PM Auto Exit", tooltip="Closes all active trades at 3:15 PM and blocks new entries after 3:15 PM", group="Strategy Toggles")

// ═════════════════════════════════════════════════════════════════
// NIFTY BIAS CONFLUENCE CALCULATION - TOP 20 STOCKS
// ═════════════════════════════════════════════════════════════════

// Bias calculation parameters
bias_update_frequency = input.int(5, "Bias Update Frequency (minutes)", minval=1, maxval=15, tooltip="Time between bias analysis sessions", group="Bias Confluence")
bias_change_threshold = input.float(0.05, "Bias Threshold %", minval=0.01, step=0.01, tooltip="Minimum % change to classify as gainer/loser", group="Bias Confluence")

// Configurable bias thresholds
bias_bull_threshold = input.float(8.0, "BULL Bias Threshold", minval=1.0, maxval=50.0, step=0.5, tooltip="Spread above this value = BULL bias", group="Bias Confluence")
bias_bear_threshold = input.float(-8.0, "BEAR Bias Threshold", maxval=-1.0, minval=-50.0, step=0.5, tooltip="Spread below this value = BEAR bias", group="Bias Confluence")

// Top 16 Nifty stocks with OFFICIAL WEIGHTAGES (Total: ~66% coverage)
bias_top16_symbols = array.from("NSE:HDFCBANK", "NSE:ICICIBANK", "NSE:RELIANCE", "NSE:INFY", "NSE:BHARTIARTL", "NSE:LT", "NSE:ITC", "NSE:TCS", "NSE:SBIN", "NSE:AXISBANK", "NSE:KOTAKBANK", "NSE:M&M", "NSE:BAJFINANCE", "NSE:HINDUNILVR", "NSE:BAJAJFINSV", "NSE:ADANIENT")
bias_top16_weights = array.from(13.11, 9.00, 8.31, 4.78, 4.65, 3.82, 3.45, 2.85, 2.79, 2.70, 2.60, 2.55, 2.14, 2.13, 2.11, 1.97)

// Request security data for top 20 stocks (40 calls total - within Pine Script limit)
// Stocks 1-10
bias_stock1_current = request.security("NSE:HDFCBANK", str.tostring(bias_update_frequency), close[0], lookahead=barmerge.lookahead_off)
bias_stock1_ref = request.security("NSE:HDFCBANK", str.tostring(bias_update_frequency), close[1], lookahead=barmerge.lookahead_off)
bias_stock2_current = request.security("NSE:ICICIBANK", str.tostring(bias_update_frequency), close[0], lookahead=barmerge.lookahead_off)
bias_stock2_ref = request.security("NSE:ICICIBANK", str.tostring(bias_update_frequency), close[1], lookahead=barmerge.lookahead_off)
bias_stock3_current = request.security("NSE:RELIANCE", str.tostring(bias_update_frequency), close[0], lookahead=barmerge.lookahead_off)
bias_stock3_ref = request.security("NSE:RELIANCE", str.tostring(bias_update_frequency), close[1], lookahead=barmerge.lookahead_off)
bias_stock4_current = request.security("NSE:INFY", str.tostring(bias_update_frequency), close[0], lookahead=barmerge.lookahead_off)
bias_stock4_ref = request.security("NSE:INFY", str.tostring(bias_update_frequency), close[1], lookahead=barmerge.lookahead_off)
bias_stock5_current = request.security("NSE:BHARTIARTL", str.tostring(bias_update_frequency), close[0], lookahead=barmerge.lookahead_off)
bias_stock5_ref = request.security("NSE:BHARTIARTL", str.tostring(bias_update_frequency), close[1], lookahead=barmerge.lookahead_off)
bias_stock6_current = request.security("NSE:LT", str.tostring(bias_update_frequency), close[0], lookahead=barmerge.lookahead_off)
bias_stock6_ref = request.security("NSE:LT", str.tostring(bias_update_frequency), close[1], lookahead=barmerge.lookahead_off)
bias_stock7_current = request.security("NSE:ITC", str.tostring(bias_update_frequency), close[0], lookahead=barmerge.lookahead_off)
bias_stock7_ref = request.security("NSE:ITC", str.tostring(bias_update_frequency), close[1], lookahead=barmerge.lookahead_off)
bias_stock8_current = request.security("NSE:TCS", str.tostring(bias_update_frequency), close[0], lookahead=barmerge.lookahead_off)
bias_stock8_ref = request.security("NSE:TCS", str.tostring(bias_update_frequency), close[1], lookahead=barmerge.lookahead_off)
bias_stock9_current = request.security("NSE:SBIN", str.tostring(bias_update_frequency), close[0], lookahead=barmerge.lookahead_off)
bias_stock9_ref = request.security("NSE:SBIN", str.tostring(bias_update_frequency), close[1], lookahead=barmerge.lookahead_off)
bias_stock10_current = request.security("NSE:AXISBANK", str.tostring(bias_update_frequency), close[0], lookahead=barmerge.lookahead_off)
bias_stock10_ref = request.security("NSE:AXISBANK", str.tostring(bias_update_frequency), close[1], lookahead=barmerge.lookahead_off)

// Stocks 11-20
bias_stock11_current = request.security("NSE:KOTAKBANK", str.tostring(bias_update_frequency), close[0], lookahead=barmerge.lookahead_off)
bias_stock11_ref = request.security("NSE:KOTAKBANK", str.tostring(bias_update_frequency), close[1], lookahead=barmerge.lookahead_off)
bias_stock12_current = request.security("NSE:HCLTECH", str.tostring(bias_update_frequency), close[0], lookahead=barmerge.lookahead_off)
bias_stock12_ref = request.security("NSE:HCLTECH", str.tostring(bias_update_frequency), close[1], lookahead=barmerge.lookahead_off)
bias_stock13_current = request.security("NSE:BAJFINANCE", str.tostring(bias_update_frequency), close[0], lookahead=barmerge.lookahead_off)
bias_stock13_ref = request.security("NSE:BAJFINANCE", str.tostring(bias_update_frequency), close[1], lookahead=barmerge.lookahead_off)
bias_stock14_current = request.security("NSE:MARUTI", str.tostring(bias_update_frequency), close[0], lookahead=barmerge.lookahead_off)
bias_stock14_ref = request.security("NSE:MARUTI", str.tostring(bias_update_frequency), close[1], lookahead=barmerge.lookahead_off)
bias_stock15_current = request.security("NSE:ASIANPAINT", str.tostring(bias_update_frequency), close[0], lookahead=barmerge.lookahead_off)
bias_stock15_ref = request.security("NSE:ASIANPAINT", str.tostring(bias_update_frequency), close[1], lookahead=barmerge.lookahead_off)
bias_stock16_current = request.security("NSE:NESTLEIND", str.tostring(bias_update_frequency), close[0], lookahead=barmerge.lookahead_off)
bias_stock16_ref = request.security("NSE:NESTLEIND", str.tostring(bias_update_frequency), close[1], lookahead=barmerge.lookahead_off)
bias_stock17_current = request.security("NSE:ULTRACEMCO", str.tostring(bias_update_frequency), close[0], lookahead=barmerge.lookahead_off)
bias_stock17_ref = request.security("NSE:ULTRACEMCO", str.tostring(bias_update_frequency), close[1], lookahead=barmerge.lookahead_off)
bias_stock18_current = request.security("NSE:TITAN", str.tostring(bias_update_frequency), close[0], lookahead=barmerge.lookahead_off)
bias_stock18_ref = request.security("NSE:TITAN", str.tostring(bias_update_frequency), close[1], lookahead=barmerge.lookahead_off)
bias_stock19_current = request.security("NSE:WIPRO", str.tostring(bias_update_frequency), close[0], lookahead=barmerge.lookahead_off)
bias_stock19_ref = request.security("NSE:WIPRO", str.tostring(bias_update_frequency), close[1], lookahead=barmerge.lookahead_off)
bias_stock20_current = request.security("NSE:SUNPHARMA", str.tostring(bias_update_frequency), close[0], lookahead=barmerge.lookahead_off)
bias_stock20_ref = request.security("NSE:SUNPHARMA", str.tostring(bias_update_frequency), close[1], lookahead=barmerge.lookahead_off)

// Arrays for bias calculation - TOP 16 STOCKS
bias_current_prices = array.from(bias_stock1_current, bias_stock2_current, bias_stock3_current, bias_stock4_current, bias_stock5_current, bias_stock6_current, bias_stock7_current, bias_stock8_current, bias_stock9_current, bias_stock10_current, bias_stock11_current, bias_stock12_current, bias_stock13_current, bias_stock14_current, bias_stock15_current, bias_stock16_current)
bias_ref_prices = array.from(bias_stock1_ref, bias_stock2_ref, bias_stock3_ref, bias_stock4_ref, bias_stock5_ref, bias_stock6_ref, bias_stock7_ref, bias_stock8_ref, bias_stock9_ref, bias_stock10_ref, bias_stock11_ref, bias_stock12_ref, bias_stock13_ref, bias_stock14_ref, bias_stock15_ref, bias_stock16_ref)

// Calculate bias with top 20 stocks
var float bias_gainers_weight = 0.0
var float bias_losers_weight = 0.0
var float bias_spread = 0.0
var string current_nifty_bias = "SIDEWAYS"
var int bias_gainers_count = 0
var int bias_losers_count = 0
var int bias_unchanged_count = 0

// Update bias calculation with configurable thresholds
if barstate.isconfirmed
    temp_gainers_weight = 0.0
    temp_losers_weight = 0.0
    temp_gainers_count = 0
    temp_losers_count = 0
    temp_unchanged_count = 0
    
    for i = 0 to 15  // Top 16 stocks
        weight = array.get(bias_top16_weights, i)
        stock_current = array.get(bias_current_prices, i)
        stock_ref = array.get(bias_ref_prices, i)
        
        change_pct = stock_ref != 0 and not na(stock_ref) and not na(stock_current) ? 
                     ((stock_current - stock_ref) / stock_ref) * 100 : 0.0
        
        if change_pct > bias_change_threshold
            temp_gainers_weight += weight
            temp_gainers_count += 1
        else if change_pct < -bias_change_threshold
            temp_losers_weight += weight
            temp_losers_count += 1
        else
            temp_unchanged_count += 1
    
    bias_gainers_weight := temp_gainers_weight
    bias_losers_weight := temp_losers_weight
    bias_gainers_count := temp_gainers_count
    bias_losers_count := temp_losers_count
    bias_unchanged_count := temp_unchanged_count
    
    bias_spread := bias_gainers_weight - bias_losers_weight
    current_nifty_bias := bias_spread > bias_bull_threshold ? "BULL" : bias_spread < bias_bear_threshold ? "BEAR" : "SIDEWAYS"

// Bias confluence functions
isBiasAllowedForBuy() =>
    if not enable_bias_confluence
        true
    else
        current_nifty_bias == "BULL"

isBiasAllowedForSell() =>
    if not enable_bias_confluence
        true
    else
        current_nifty_bias == "BEAR"

getBiasSpreadInfo() => (bias_spread > 0 ? "+" + str.tostring(bias_spread, "#.##") : str.tostring(bias_spread, "#.##")) + " (" + str.tostring(bias_gainers_count) + "G/" + str.tostring(bias_losers_count) + "L/" + str.tostring(bias_unchanged_count) + "U)"

getBiasThresholdInfo() => "Bull>" + str.tostring(bias_bull_threshold, "#.#") + " | Bear<" + str.tostring(bias_bear_threshold, "#.#")

getBiasCoverageInfo() => "Top16: " + str.tostring(math.round(bias_gainers_weight + bias_losers_weight, 1)) + "% coverage"

// ═════════════════════════════════════════════════════════════════
// BOLLINGER BAND REVERSAL STRATEGY INPUTS - IMPROVED SL LOGIC
// ═════════════════════════════════════════════════════════════════

// Bollinger Band Settings
bb_length = input.int(20, title="BB Length", minval=1, group="Bollinger Band Strategy")
bb_std_dev = input.float(1.7, title="BB Standard Deviation", minval=0.1, step=0.1, group="Bollinger Band Strategy")

// Band Stretch Settings
enable_stretch_filter = input.bool(true, title="✅ Enable Band Stretch Filter", group="Bollinger Band Strategy")
min_band_width = input.float(50.0, title="Minimum Band Width (Points)", minval=10.0, maxval=200.0, group="Bollinger Band Strategy")

// Trading Settings
tp_points = input.float(50.0, title="Take Profit Points", minval=10.0, maxval=200.0, group="Bollinger Band Strategy")

// IMPROVED STOP LOSS SETTINGS
bb_sl_type = input.string("Smart SL (Min Risk)", title="Stop Loss Type", options=["Smart SL (Min Risk)", "Candle Based", "Fixed Points"], group="Bollinger Band Strategy")
bb_fixed_sl_points = input.float(30.0, title="Max SL Points (Smart/Fixed)", minval=5.0, maxval=100.0, step=1.0, group="Bollinger Band Strategy", tooltip="For Smart SL: Maximum risk in points. For Fixed SL: Exact SL distance")
bb_sl_buffer = input.float(2.0, title="Alert Candle SL Buffer", minval=-50, maxval=10.0, step=0.5, group="Bollinger Band Strategy", tooltip="Extra buffer points added to alert candle high/low")
bb_enable_alerts = input.bool(true, title="Enable BB Alerts", group="Bollinger Band Strategy")

// BB Time Exclusion Settings - 12 slots
bb_exclude_0915_0930 = input.bool(true, title="Exclude 9:15-9:30", group="Bollinger Band Strategy")
bb_exclude_0930_0945 = input.bool(true, title="Exclude 9:30-9:45", group="Bollinger Band Strategy")
bb_exclude_1015_1030 = input.bool(true, title="Exclude 10:15-10:30", group="Bollinger Band Strategy")
bb_exclude_1115_1145 = input.bool(true, title="Exclude 11:15-11:45", group="Bollinger Band Strategy")
bb_exclude_1200_1215 = input.bool(true, title="Exclude 12:00-12:15", group="Bollinger Band Strategy")
bb_exclude_1245_1300 = input.bool(true, title="Exclude 12:45-13:00", group="Bollinger Band Strategy")
bb_exclude_1300_1315 = input.bool(true, title="Exclude 13:00-13:15", group="Bollinger Band Strategy")
bb_exclude_1315_1330 = input.bool(true, title="Exclude 13:15-13:30", group="Bollinger Band Strategy")
bb_exclude_1330_1345 = input.bool(true, title="Exclude 13:30-13:45", group="Bollinger Band Strategy")
bb_exclude_1415_1430 = input.bool(true, title="Exclude 14:15-14:30", group="Bollinger Band Strategy")
bb_exclude_1430_1445 = input.bool(true, title="Exclude 14:30-14:45", group="Bollinger Band Strategy")
bb_exclude_1500_1515 = input.bool(true, title="Exclude 15:00-15:15", group="Bollinger Band Strategy") 

// Display Settings - DEFAULT OFF FOR CLEAN VISUALS
show_bb_lines = input.bool(false, title="Show Bollinger Bands", group="Bollinger Band Strategy")
show_bb_signals = input.bool(true, title="Show BB Entry Signals", group="Bollinger Band Strategy")
show_bb_tp_sl_labels = input.bool(true, title="Show BB TP/SL Hit Labels", group="Bollinger Band Strategy")

// ═════════════════════════════════════════════════════════════════
// BREAKOUT STRATEGY INPUTS WITH ATR TRAILING
// ═════════════════════════════════════════════════════════════════

prd = input.int(7, title="Pivot Period", minval=2, group="Breakout Strategy")
bo_len = input.int(200, title="Max Breakout Length", minval=0, maxval=3000, group="Breakout Strategy")
cwidthu = input.float(6.0, title="Threshold Rate %", minval=1.0, maxval=100.0, group="Breakout Strategy") / 100
mintest = input.int(2, title="Minimum Number of Tests", minval=1, group="Breakout Strategy")
min_points_above_zone = input.float(2.5, title="Min Points Above Zone for BUY", minval=0.5, maxval=20.0, step=0.5, group="Breakout Strategy")
min_points_below_zone = input.float(2.5, title="Min Points Below Zone for SELL", minval=0.5, maxval=20.0, step=0.5, group="Breakout Strategy")

// BREAKOUT ATR TRAILING SETTINGS (UPDATED TO MATCH HAT SCRIPT)
breakout_enable_atr_trail = input.bool(true, title="✅ Enable ATR Trailing Stop", group="Breakout Strategy")
breakout_atr_period = input.int(5, title="ATR Trail Period", minval=1, group="Breakout Strategy")
breakout_atr_hhv = input.int(10, title="ATR Trail HHV Period", minval=1, group="Breakout Strategy")
breakout_atr_mult = input.float(2.5, title="ATR Trail Multiplier", minval=0.1, group="Breakout Strategy")

// LEGACY SETTINGS (for backward compatibility)
Atr = input.int(defval=5, title='Legacy ATR Period', minval=1, maxval=500, group="Breakout Strategy")
Hhv = input.int(defval=10, title='Legacy HHV Period', minval=1, maxval=500, group="Breakout Strategy")
Mult = input.float(defval=2.5, title='Legacy ATR Multiplier', minval=0.1, group="Breakout Strategy")

// STOP LOSS SETTINGS
breakout_sl_type = input.string("ATR Trailing", title="Stop Loss Type", options=["Fixed Points", "ATR Trailing", "Entry Candle Low"], group="Breakout Strategy")
breakout_fixed_sl_points = input.float(31.0, title="Fixed SL Points", group="Breakout Strategy")
entry_candle_buffer = input.float(5.0, title="Entry Candle SL Buffer (Points)", minval=-100, maxval=50.0, group="Breakout Strategy")
auto_tp_time = input.bool(true, title="Auto TP at 3:15 PM", group="Breakout Strategy")

breakout_enable_alerts = input.bool(true, title="Enable Breakout Alerts", group="Breakout Strategy")

// ═════════════════════════════════════════════════════════════════
// TOP BOTTOM HUNTER STRATEGY WITH ATR TRAILING
// ═════════════════════════════════════════════════════════════════

// Fibonacci Settings
tbh_fib_0 = input.float(0.382, "Fib Level 0", group="Top Bottom Hunter Strategy")
tbh_fib_1 = input.float(0.618, "Fib Level 1", group="Top Bottom Hunter Strategy")
tbh_swing_len = input.int(20, "Swing Lookback", minval=1, group="Top Bottom Hunter Strategy")

// RSI Settings
tbh_rsi_length = input.int(14, "RSI Length", group="Top Bottom Hunter Strategy")
tbh_rsi_overbought = input.int(70, "RSI Overbought Level", group="Top Bottom Hunter Strategy")
tbh_rsi_oversold = input.int(30, "RSI Oversold Level", group="Top Bottom Hunter Strategy")

// Volume Settings
tbh_volume_enabled = input.bool(true, title="Enable Volume Confirmation", group="Top Bottom Hunter Strategy")
tbh_volume_ma_length = input.int(20, title="Volume MA Length", minval=5, maxval=50, group="Top Bottom Hunter Strategy")
tbh_volume_multiplier = input.float(1.2, title="Volume Multiplier (Above MA)", minval=1.0, maxval=3.0, step=0.1, group="Top Bottom Hunter Strategy")

// TBH ATR TRAILING SETTINGS (UPDATED TO MATCH HAT SCRIPT)
tbh_enable_atr_trail = input.bool(true, title="✅ Enable ATR Trailing Stop", group="Top Bottom Hunter Strategy")
tbh_atr_period = input.int(5, title="ATR Trail Period", minval=1, group="Top Bottom Hunter Strategy")
tbh_atr_hhv = input.int(10, title="ATR Trail HHV Period", minval=1, group="Top Bottom Hunter Strategy")
tbh_atr_mult = input.float(2.5, title="ATR Trail Multiplier", minval=0.1, group="Top Bottom Hunter Strategy")

// SUPERTREND SETTINGS FOR TBH (LEGACY - for backward compatibility)
tbh_supertrend_atr_length = input.int(1, title="Legacy Supertrend ATR Length", minval=1, group="Top Bottom Hunter Strategy")
tbh_supertrend_multiplier = input.float(2.0, title="Legacy Supertrend Multiplier", minval=0.1, step=0.1, group="Top Bottom Hunter Strategy")

// INITIAL STOP LOSS SETTINGS (Before ATR Trail Takes Over)
tbh_initial_sl_type = input.string("Fixed Points", title="Initial SL Type (Before Trail)", options=["Fixed Points", "Entry Candle Low"], group="Top Bottom Hunter Strategy", tooltip="Initial SL used until ATR trail activates")
tbh_fixed_sl_points = input.float(31.0, title="Fixed SL Points", group="Top Bottom Hunter Strategy")
tbh_entry_candle_buffer = input.float(5.0, title="Entry Candle SL Buffer (Points)", minval=-100, maxval=50.0, group="Top Bottom Hunter Strategy")

tbh_label_offset = input.float(1.0, title="Label Distance", minval=0.1, maxval=5.0, step=0.1, group="Top Bottom Hunter Strategy")

// TBH Time Exclusion Settings - 4 slots
tbh_exclude_1015_1030 = input.bool(true, title="Exclude 10:15-10:30", group="Top Bottom Hunter Strategy")
tbh_exclude_1045_1100 = input.bool(true, title="Exclude 10:45-11:00", group="Top Bottom Hunter Strategy")
tbh_exclude_1300_1315 = input.bool(true, title="Exclude 13:00-13:15", group="Top Bottom Hunter Strategy")
tbh_exclude_1430_1445 = input.bool(true, title="Exclude 14:30-14:45", group="Top Bottom Hunter Strategy")

// TBH Candle Color Filter
tbh_use_candle_color = input.bool(true, title="✅ Enable Candle Color Filter", tooltip="BUY only on green candles, SELL only on red candles", group="Top Bottom Hunter Strategy")

// TBH Enhanced Entry Validation
tbh_use_enhanced_entry = input.bool(true, title="✅ Enable Enhanced Entry Validation", tooltip="Validates entry based on previous candle color and current close position", group="Top Bottom Hunter Strategy")

// TBH Enhanced Entry Buffer
tbh_enhanced_entry_buffer = input.float(2.0, title="Enhanced Entry Buffer Points", minval=0.0, maxval=20.0, step=0.5, tooltip="Minimum points required above/below reference level", group="Top Bottom Hunter Strategy")

// TBH TP MODE TOGGLE - NEW FEATURE
tbh_tp_mode = input.string("ATR Trailing", title="TBH TP Mode", options=["Fixed TP", "ATR Trailing"], group="Top Bottom Hunter Strategy", tooltip="Fixed TP: Uses fixed take profit points. ATR Trailing: Uses ATR-based trailing stop")
tbh_fixed_tp_points = input.float(50.0, title="Fixed TP Points (when Fixed TP selected)", minval=10.0, maxval=200.0, group="Top Bottom Hunter Strategy")

// Display Settings
show_tbh_fibs = input.bool(false, title="Show Fibonacci Lines", group="Top Bottom Hunter Strategy")
show_tbh_supertrend = input.bool(true, title="Show Legacy Supertrend Lines", group="Top Bottom Hunter Strategy")
show_tbh_atr_trail = input.bool(true, title="Show ATR Trailing Lines", group="Top Bottom Hunter Strategy")
tbh_enable_alerts = input.bool(true, title="Enable TBH Alerts", group="Top Bottom Hunter Strategy")

// ═════════════════════════════════════════════════════════════════
// GLOBAL DISPLAY SETTINGS
// ═════════════════════════════════════════════════════════════════

show_performance_table = input.bool(true, title="Show Combined Performance Table", group="Global Display Settings")
table_position = input.string("bottom_right", title="Table Position", options=["top_left", "top_center", "top_right", "middle_left", "middle_center", "middle_right", "bottom_left", "bottom_center", "bottom_right"], group="Global Display Settings")

// User Info - Updated
user_login = input.string("saranghaeyokv-bot", title="User Login", group="Global Display Settings")

// ═════════════════════════════════════════════════════════════════
// UTILITY FUNCTIONS
// ═════════════════════════════════════════════════════════════════

getCurrentTimestamp() =>
    year_str = str.tostring(year(time))
    month_str = str.tostring(month(time), "00")
    day_str = str.tostring(dayofmonth(time), "00")
    hour_str = str.tostring(hour(time), "00")
    minute_str = str.tostring(minute(time), "00")
    second_str = str.tostring(second(time), "00")
    year_str + "-" + month_str + "-" + day_str + " " + hour_str + ":" + minute_str + ":" + second_str

getTablePosition(pos) =>
    switch pos
        "top_left" => position.top_left
        "top_center" => position.top_center
        "top_right" => position.top_right
        "middle_left" => position.middle_left
        "middle_center" => position.middle_center
        "middle_right" => position.middle_right
        "bottom_left" => position.bottom_left
        "bottom_center" => position.bottom_center
        "bottom_right" => position.bottom_right
        => position.bottom_right

calculateWinRate(tpCount, slCount) =>
    totalTrades = tpCount + slCount
    totalTrades > 0 ? math.round((tpCount / totalTrades) * 100, 2) : 0.0

getMonthNameWithYear(monthNum, yearNum) =>
    month_name = switch monthNum
        1 => "January"
        2 => "February"
        3 => "March"
        4 => "April"
        5 => "May"
        6 => "June"
        7 => "July"
        8 => "August"
        9 => "September"
        10 => "October"
        11 => "November"
        12 => "December"
        => "Unknown"
    month_name + " " + str.tostring(yearNum)

// FIXED TIME RESTRICTION FUNCTIONS
isAfter315PM() =>
    if not enable_315_exit
        false
    else
        t = time('1', 'GMT+5:30')
        hour(t) > 15 or (hour(t) == 15 and minute(t) >= 15)

// NEW FUNCTION: Block all entries after 3:15 PM
isEntryBlocked() =>
    isAfter315PM()

// ═════════════════════════════════════════════════════════════════
// TBH CANDLE COLOR FILTER FUNCTIONS
// ═════════════════════════════════════════════════════════════════

// TBH Candle Color Validation
isTBHCandleColorValid(isBuySignal) =>
    if not tbh_use_candle_color
        true
    else
        if isBuySignal
            close > open  // Green candle for BUY
        else
            close < open  // Red candle for SELL

// TBH Enhanced Entry Validation with Buffer
isTBHEnhancedEntryValid(isBuySignal) =>
    if not tbh_use_enhanced_entry
        true
    else
        // Get previous candle info
        prev_was_green = close[1] > open[1]
        prev_was_red = close[1] < open[1]
        prev_close = close[1]
        prev_open = open[1]
        current_close = close
        buffer_points = tbh_enhanced_entry_buffer
        
        if isBuySignal
            // BUY conditions with buffer
            if prev_was_green
                // Previous green: current close should be at least 2 points above previous close
                current_close >= (prev_close + buffer_points)
            else if prev_was_red
                // Previous red: current close should be at least 2 points above previous open
                current_close >= (prev_open + buffer_points)
            else
                // Previous doji or equal: allow entry (no buffer requirement for doji)
                true
        else
            // SELL conditions with buffer
            if prev_was_green
                // Previous green: current close should be at least 2 points below previous open
                current_close <= (prev_open - buffer_points)
            else if prev_was_red
                // Previous red: current close should be at least 2 points below previous close
                current_close <= (prev_close - buffer_points)
            else
                // Previous doji or equal: allow entry (no buffer requirement for doji)
                true

// ═════════════════════════════════════════════════════════════════
// FIXED PERFORMANCE TRACKING SYSTEM - CORRECTED DATA DISPLAY
// ═════════════════════════════════════════════════════════════════

// Combined performance tracking arrays - FIXED INITIALIZATION
var array<int> combined_trade_months = array.new<int>()
var array<int> combined_trade_years = array.new<int>()
var array<bool> combined_trade_was_tp = array.new<bool>()
var array<float> combined_trade_points = array.new<float>()
var array<string> combined_trade_strategy = array.new<string>()

// Combined counters
var int combined_total_tp_count = 0
var int combined_total_sl_count = 0
var float combined_total_tp_points = 0.0
var float combined_total_sl_points = 0.0

// Individual strategy counters for display
var int bb_tp_count = 0
var int bb_sl_count = 0
var int breakout_tp_count = 0
var int breakout_sl_count = 0
var int tbh_tp_count = 0
var int tbh_sl_count = 0

// SL Streak tracking
var int current_sl_streak = 0
var int max_sl_streak = 0
var float current_sl_streak_points = 0.0
var float max_sl_streak_points = 0.0

// ENHANCED OVERLAP FILTER TRACKING
var bool any_strategy_active = false
var bool bb_signal_this_bar = false
var bool breakout_signal_this_bar = false
var bool tbh_signal_this_bar = false

// ═════════════════════════════════════════════════════════════════
// ATR TRAILING STOP CALCULATIONS (SHARED BY TBH & BREAKOUT)
// ═════════════════════════════════════════════════════════════════

// TBH ATR Trailing Stop calculation
tbh_atr = ta.atr(tbh_atr_period)
tbh_long_stop_raw = low - tbh_atr_mult * tbh_atr
tbh_short_stop_raw = high + tbh_atr_mult * tbh_atr

var float tbh_lower_atr_trail = na
var float tbh_upper_atr_trail = na

// Breakout ATR Trailing Stop calculation
breakout_atr = ta.atr(breakout_atr_period)
breakout_long_stop_raw = low - breakout_atr_mult * breakout_atr
breakout_short_stop_raw = high + breakout_atr_mult * breakout_atr

var float breakout_lower_atr_trail = na
var float breakout_upper_atr_trail = na

// ═════════════════════════════════════════════════════════════════
// BOLLINGER BAND CALCULATIONS WITH IMPROVED SL LOGIC
// ═════════════════════════════════════════════════════════════════

// Calculate Bollinger Bands
bb_basis = ta.sma(close, bb_length)
bb_dev = bb_std_dev * ta.stdev(close, bb_length)
bb_upper = bb_basis + bb_dev
bb_lower = bb_basis - bb_dev

// Band width calculation
band_width = bb_upper - bb_lower

// Band stretch condition
is_band_stretched = if enable_stretch_filter
    band_width >= min_band_width
else
    true

// Alert candles based on band position
alert_above_upper = low > bb_upper and is_band_stretched
alert_below_lower = high < bb_lower and is_band_stretched

// Determine candle color for visual purposes
is_green_candle = close > open
is_red_candle = close < open

// Store alert candle information
var float bb_alert_candle_high = na
var float bb_alert_candle_low = na
var bool bb_waiting_for_entry = false
var bool bb_alert_is_above_upper = false
var int bb_alert_bar_index = na

// Update alert candle levels - ONLY ON CONFIRMED BARS
if alert_above_upper and enable_bb_strategy and barstate.isconfirmed
    bb_alert_candle_high := high
    bb_alert_candle_low := low
    bb_waiting_for_entry := true
    bb_alert_is_above_upper := true
    bb_alert_bar_index := bar_index

if alert_below_lower and enable_bb_strategy and barstate.isconfirmed
    bb_alert_candle_high := high
    bb_alert_candle_low := low
    bb_waiting_for_entry := true
    bb_alert_is_above_upper := false
    bb_alert_bar_index := bar_index

// BB Position tracking
var bool bb_in_trade = false
var string bb_trade_type = ""
var float bb_entry_price = na
var float bb_stop_loss = na
var float bb_take_profit = na
var int bb_entry_bar_index = na
var string bb_sl_method = ""

// IMPROVED SL CALCULATION FUNCTION
calculateSmartSL(entryPrice, alertHigh, alertLow, isBuy, maxPoints, buffer) =>
    var float smartSL = na
    var string method = ""
    
    if isBuy
        // For BUY: SL should be below entry
        candleBasedSL = alertLow - buffer
        fixedPointsSL = entryPrice - maxPoints
        
        // Choose whichever gives LESS RISK (higher SL level)
        smartSL := math.max(candleBasedSL, fixedPointsSL)
        
        // Determine which method was used
        if smartSL == candleBasedSL
            method := "Candle (" + str.tostring(smartSL, "#.##") + ")"
        else
            method := "Fixed " + str.tostring(maxPoints) + "pts (" + str.tostring(smartSL, "#.##") + ")"
    else
        // For SELL: SL should be above entry
        candleBasedSL = alertHigh + buffer
        fixedPointsSL = entryPrice + maxPoints
        
        // Choose whichever gives LESS RISK (lower SL level)
        smartSL := math.min(candleBasedSL, fixedPointsSL)
        
        // Determine which method was used
        if smartSL == candleBasedSL
            method := "Candle (" + str.tostring(smartSL, "#.##") + ")"
        else
            method := "Fixed " + str.tostring(maxPoints) + "pts (" + str.tostring(smartSL, "#.##") + ")"
    
    [smartSL, method]

// ═════════════════════════════════════════════════════════════════
// BREAKOUT STRATEGY CALCULATIONS
// ═════════════════════════════════════════════════════════════════

// Legacy ATR Trailing calculation for backward compatibility
Prev = ta.highest(high - Mult * ta.atr(Atr), Hhv)
cum_1 = ta.cum(1)
highest_1 = ta.highest(high - Mult * ta.atr(Atr), Hhv)
highest_2 = ta.highest(high - Mult * ta.atr(Atr), Hhv)
iff_1 = close > highest_1 and close > close[1] ? highest_2 : Prev
TS = cum_1 < 16 ? close : iff_1
iff_2 = close < TS ? color.red : color.black
Color = close > TS ? color.green : iff_2
Buy_ATR = ta.crossover(close, TS)
Sell_ATR = ta.crossunder(close, TS)
is_auto_tp_time = auto_tp_time and hour(time) == 15 and minute(time) == 15

lll = math.max(math.min(bar_index, 300), 1)
h_value = ta.highest(lll)
l_value = ta.lowest(lll)
chwidth = (h_value - l_value) * cwidthu

ph = ta.pivothigh(high, prd, prd)
pl = ta.pivotlow(low, prd, prd)

var phval = array.new_float(0)
var phloc = array.new_int(0)
var plval = array.new_float(0)
var plloc = array.new_int(0)

if not na(ph)
    array.unshift(phval, ph)
    array.unshift(phloc, bar_index - prd)
    if array.size(phval) > 1
        for x = array.size(phloc) - 1 to 1
            if bar_index - array.get(phloc, x) > bo_len
                array.pop(phloc)
                array.pop(phval)
        
if not na(pl)
    array.unshift(plval, pl)
    array.unshift(plloc, bar_index - prd)
    if array.size(plval) > 1
        for x = array.size(plloc) - 1 to 1
            if bar_index - array.get(plloc, x) > bo_len
                array.pop(plloc)
                array.pop(plval)

// Breakout Detection - ONLY ON CONFIRMED BARS
bullish_breakout_base = false
var float breakout_entry_candle_low = na

hgst_value = ta.highest(prd)[1]

if array.size(phval) >= mintest and close > open and enable_breakout_strategy and not isEntryBlocked() and isBiasAllowedForBuy() and barstate.isconfirmed
    if close > hgst_value
        bomax = array.get(phval, 0)
        xx = 0
        for x = 0 to array.size(phval) - 1
            if array.get(phval, x) >= close
                break
            xx := x
            bomax := math.max(bomax, array.get(phval, x))
        if xx >= mintest and open <= bomax
            num = 0
            for x = 0 to xx
                if array.get(phval, x) <= bomax and array.get(phval, x) >= bomax - chwidth
                    num += 1
            if num >= mintest and hgst_value < bomax
                points_above_zone = close - bomax
                if points_above_zone >= min_points_above_zone
                    bullish_breakout_base := true
                    breakout_entry_candle_low := low

bearish_breakdown_base = false
var float breakout_entry_candle_high = na

lwst_value = ta.lowest(prd)[1]

if array.size(plval) >= mintest and close < open and enable_breakout_strategy and not isEntryBlocked() and isBiasAllowedForSell() and barstate.isconfirmed
    if close < lwst_value
        bomin = array.get(plval, 0)
        xx = 0
        for x = 0 to array.size(plval) - 1
            if array.get(plval, x) <= close
                break
            xx := x
            bomin := math.min(bomin, array.get(plval, x))
        if xx >= mintest and open >= bomin
            num1 = 0
            for x = 0 to xx
                if array.get(plval, x) >= bomin and array.get(plval, x) <= bomin + chwidth
                    num1 += 1
            if num1 >= mintest and lwst_value > bomin
                points_below_zone = bomin - close
                if points_below_zone >= min_points_below_zone
                    bearish_breakdown_base := true
                    breakout_entry_candle_high := high

// Breakout Trade Management Variables
var bool breakout_in_trade = false
var string breakout_trade_type = ""
var float breakout_entry_price = na
var float breakout_stop_loss = na
var int breakout_entry_bar_index = na

// Breakout Trade Exit Flags
var bool breakout_tp_hit_alert = false
var bool breakout_sl_hit_alert = false
var bool breakout_auto_tp_hit_alert = false
var bool breakout_315_exit = false
var float breakout_trade_points_tp = 0.0
var float breakout_trade_points_sl = 0.0

// ═════════════════════════════════════════════════════════════════
// TOP BOTTOM HUNTER WITH ATR TRAILING STOP
// ═════════════════════════════════════════════════════════════════

// Swing High/Low for Fib
tbh_swing_high = ta.highest(high, tbh_swing_len)
tbh_swing_low  = ta.lowest(low, tbh_swing_len)
tbh_fib_range  = tbh_swing_high - tbh_swing_low

tbh_fib_level_0 = tbh_swing_high - (tbh_fib_range * tbh_fib_0)
tbh_fib_level_1 = tbh_swing_high - (tbh_fib_range * tbh_fib_1)

// RSI
tbh_rsi_value = ta.rsi(close, tbh_rsi_length)

// Volume MA
tbh_volume_ma = ta.sma(volume, tbh_volume_ma_length)
tbh_volume_confirmed = volume > (tbh_volume_ma * tbh_volume_multiplier)

// ═════════════════════════════════════════════════════════════════
// LEGACY SUPERTREND CALCULATION (for backward compatibility)
// ═════════════════════════════════════════════════════════════════

// ATR and median price for Supertrend
tbh_atr_value = ta.atr(tbh_supertrend_atr_length)
tbh_hl2 = (high + low) / 2

// Calculate basic bands
tbh_basic_upperband = tbh_hl2 + (tbh_supertrend_multiplier * tbh_atr_value)
tbh_basic_lowerband = tbh_hl2 - (tbh_supertrend_multiplier * tbh_atr_value)

// SMOOTHING LOGIC - This is what makes it stable!
var float tbh_upperband = na
var float tbh_lowerband = na

// Upper band smoothing - only moves up, never down when in uptrend
tbh_upperband := tbh_basic_upperband < nz(tbh_upperband[1], tbh_basic_upperband) or close[1] > nz(tbh_upperband[1], tbh_basic_upperband) ? tbh_basic_upperband : nz(tbh_upperband[1], tbh_basic_upperband)

// Lower band smoothing - only moves down, never up when in downtrend  
tbh_lowerband := tbh_basic_lowerband > nz(tbh_lowerband[1], tbh_basic_lowerband) or close[1] < nz(tbh_lowerband[1], tbh_basic_lowerband) ? tbh_basic_lowerband : nz(tbh_lowerband[1], tbh_basic_lowerband)

// Supertrend calculation with smoothed bands
var float tbh_supertrend = na
var int tbh_direction = 1

// Direction logic
tbh_direction := close > nz(tbh_upperband[1], tbh_upperband) ? -1 : close < nz(tbh_lowerband[1], tbh_lowerband) ? 1 : nz(tbh_direction[1], 1)

// Supertrend value
tbh_supertrend := tbh_direction == -1 ? tbh_lowerband : tbh_upperband

// Supertrend crossover signals
tbh_buy_supertrend = ta.crossover(close, tbh_supertrend)
tbh_sell_supertrend = ta.crossunder(close, tbh_supertrend)

// ═════════════════════════════════════════════════════════════════
// TBH POSITION MANAGEMENT - ATR TRAILING LOGIC
// ═════════════════════════════════════════════════════════════════

var bool tbh_in_trade = false
var string tbh_trade_type = na
var float tbh_entry_price = na
var float tbh_initial_sl = na  // Initial SL (Fixed/Candle based)
var float tbh_current_sl = na  // Current active SL (can switch to ATR trailing)
var float tbh_take_profit = na  // Take profit level (only for Fixed TP mode)
var bool tbh_atr_trail_activated = false  // Flag when ATR trailing takes over
var int tbh_entry_bar_index = na
var float tbh_entry_candle_low = na
var float tbh_entry_candle_high = na
var bool tbh_using_fixed_tp = false  // Track which TP mode is active

// TBH Entry Conditions - WITH ALL FILTERS (TIME, CANDLE COLOR, ENHANCED ENTRY, BIAS) - ONLY ON CONFIRMED BARS
tbh_buy_condition_base  = ta.crossover(tbh_rsi_value, tbh_rsi_oversold) and close > tbh_fib_level_1 and 
                         (not tbh_volume_enabled or tbh_volume_confirmed) and not tbh_in_trade and 
                         enable_tbh_strategy and not isEntryBlocked() and 
                         isTBHCandleColorValid(true) and isTBHEnhancedEntryValid(true) and isBiasAllowedForBuy() and barstate.isconfirmed

tbh_sell_condition_base = ta.crossunder(tbh_rsi_value, tbh_rsi_overbought) and close < tbh_fib_level_0 and 
                         (not tbh_volume_enabled or tbh_volume_confirmed) and not tbh_in_trade and 
                         enable_tbh_strategy and not isEntryBlocked() and 
                         isTBHCandleColorValid(false) and isTBHEnhancedEntryValid(false) and isBiasAllowedForSell() and barstate.isconfirmed

// TBH Trade Exit Flags
var bool tbh_tp_hit = false
var bool tbh_sl_hit = false
var bool tbh_315_exit = false
var float tbh_trade_points_tp = 0.0
var float tbh_trade_points_sl = 0.0

// ═════════════════════════════════════════════════════════════════
// ENHANCED OVERLAP FILTER LOGIC - NOW WITH 3 STRATEGIES
// ═════════════════════════════════════════════════════════════════

// Update active trade status FIRST
any_strategy_active := bb_in_trade or breakout_in_trade or tbh_in_trade

// Reset overlap tracking at start of each bar
bb_signal_this_bar := false
breakout_signal_this_bar := false
tbh_signal_this_bar := false

// Base signal conditions (without overlap filtering) - WITH TIME EXCLUSION AND BIAS - ONLY ON CONFIRMED BARS
bb_sell_base = bb_waiting_for_entry and bb_alert_is_above_upper and close < bb_alert_candle_low and enable_bb_strategy and not isEntryBlocked() and isBiasAllowedForSell() and barstate.isconfirmed
bb_buy_base = bb_waiting_for_entry and not bb_alert_is_above_upper and close > bb_alert_candle_high and enable_bb_strategy and not isEntryBlocked() and isBiasAllowedForBuy() and barstate.isconfirmed

// Check for potential signals
bb_has_signal = (bb_sell_base or bb_buy_base) and enable_bb_strategy
breakout_has_signal = (bullish_breakout_base or bearish_breakdown_base) and enable_breakout_strategy
tbh_has_signal = (tbh_buy_condition_base or tbh_sell_condition_base) and enable_tbh_strategy

// Count how many strategies want to signal this bar
signals_count = 0
if bb_has_signal
    signals_count := signals_count + 1
if breakout_has_signal
    signals_count := signals_count + 1
if tbh_has_signal
    signals_count := signals_count + 1

// ENHANCED OVERLAP FILTER CONDITIONS:
// 1. If overlap filter is disabled, allow all signals
// 2. If no active trades, allow all signals (normal overlap filter)
// 3. If ANY strategy has active trade, block ALL new signals
overlap_filter_blocks_all = enable_overlap_filter and any_strategy_active
same_bar_overlap = enable_overlap_filter and signals_count > 1 and not any_strategy_active

// Priority: BB > TBH > Breakout
bb_signal_allowed = not overlap_filter_blocks_all and (not same_bar_overlap or (same_bar_overlap and bb_has_signal))
tbh_signal_allowed = not overlap_filter_blocks_all and (not same_bar_overlap or (same_bar_overlap and tbh_has_signal and not bb_has_signal))
breakout_signal_allowed = not overlap_filter_blocks_all and (not same_bar_overlap or (same_bar_overlap and breakout_has_signal and not bb_has_signal and not tbh_has_signal))

// Final signal determination
bullish_breakout = bullish_breakout_base and breakout_signal_allowed
bearish_breakdown = bearish_breakdown_base and breakout_signal_allowed
bb_sell_entry = bb_sell_base and bb_signal_allowed
bb_buy_entry = bb_buy_base and bb_signal_allowed
tbh_buy_condition = tbh_buy_condition_base and tbh_signal_allowed
tbh_sell_condition = tbh_sell_condition_base and tbh_signal_allowed

// Update signal tracking flags
if bullish_breakout or bearish_breakdown
    breakout_signal_this_bar := true
if bb_sell_entry or bb_buy_entry
    bb_signal_this_bar := true
if tbh_buy_condition or tbh_sell_condition
    tbh_signal_this_bar := true

// ═════════════════════════════════════════════════════════════════
// TRADE MANAGEMENT AND POSITION UPDATES
// ═════════════════════════════════════════════════════════════════

// Generate BB entry signals with IMPROVED SL LOGIC
if bb_sell_entry and not bb_in_trade
    bb_in_trade := true
    bb_trade_type := "SELL"
    bb_entry_price := normal_close
    
    if bb_sl_type == "Smart SL (Min Risk)"
        [sl_level, sl_desc] = calculateSmartSL(bb_entry_price, bb_alert_candle_high, bb_alert_candle_low, false, bb_fixed_sl_points, bb_sl_buffer)
        bb_stop_loss := sl_level
        bb_sl_method := "Smart: " + sl_desc
    else if bb_sl_type == "Candle Based"
        bb_stop_loss := bb_alert_candle_high + bb_sl_buffer
        bb_sl_method := "Candle (" + str.tostring(bb_stop_loss, "#.##") + ")"
    else
        bb_stop_loss := bb_entry_price + bb_fixed_sl_points
        bb_sl_method := "Fixed +" + str.tostring(bb_fixed_sl_points) + " pts"
    
    bb_take_profit := bb_entry_price - tp_points
    bb_entry_bar_index := bar_index
    bb_waiting_for_entry := false

if bb_buy_entry and not bb_in_trade
    bb_in_trade := true
    bb_trade_type := "BUY"
    bb_entry_price := normal_close
    
    if bb_sl_type == "Smart SL (Min Risk)"
        [sl_level, sl_desc] = calculateSmartSL(bb_entry_price, bb_alert_candle_high, bb_alert_candle_low, true, bb_fixed_sl_points, bb_sl_buffer)
        bb_stop_loss := sl_level
        bb_sl_method := "Smart: " + sl_desc
    else if bb_sl_type == "Candle Based"
        bb_stop_loss := bb_alert_candle_low - bb_sl_buffer
        bb_sl_method := "Candle (" + str.tostring(bb_stop_loss, "#.##") + ")"
    else
        bb_stop_loss := bb_entry_price - bb_fixed_sl_points
        bb_sl_method := "Fixed -" + str.tostring(bb_fixed_sl_points) + " pts"
    
    bb_take_profit := bb_entry_price + tp_points
    bb_entry_bar_index := bar_index
    bb_waiting_for_entry := false

// Reset waiting state if no entry after 5 bars
if bb_waiting_for_entry and bar_index > bb_alert_bar_index + 5
    bb_waiting_for_entry := false

// Breakout Entry Logic with ATR Trailing
if bullish_breakout and not breakout_in_trade
    breakout_in_trade := true
    breakout_trade_type := "BUY"
    breakout_entry_price := normal_close
    breakout_entry_bar_index := bar_index
    
    // Initialize ATR trailing for BUY
    if breakout_enable_atr_trail
        breakout_lower_atr_trail := breakout_long_stop_raw
        breakout_upper_atr_trail := na
    
    if breakout_sl_type == "Fixed Points"
        breakout_stop_loss := breakout_entry_price - breakout_fixed_sl_points
    else if breakout_sl_type == "ATR Trailing"
        breakout_stop_loss := breakout_enable_atr_trail ? breakout_lower_atr_trail : TS
    else if breakout_sl_type == "Entry Candle Low"
        breakout_stop_loss := breakout_entry_candle_low - entry_candle_buffer
    
if bearish_breakdown and not breakout_in_trade
    breakout_in_trade := true
    breakout_trade_type := "SELL"
    breakout_entry_price    := normal_close
    breakout_entry_bar_index := bar_index
    
    // Initialize ATR trailing for SELL
    if breakout_enable_atr_trail
        breakout_upper_atr_trail := breakout_short_stop_raw
        breakout_lower_atr_trail := na
    
    if breakout_sl_type == "Fixed Points"
        breakout_stop_loss := breakout_entry_price + breakout_fixed_sl_points
    else if breakout_sl_type == "ATR Trailing"
        breakout_stop_loss := breakout_enable_atr_trail ? breakout_upper_atr_trail : TS
    else if breakout_sl_type == "Entry Candle Low"
        breakout_stop_loss := breakout_entry_candle_high + entry_candle_buffer

// Update ATR trailing stops for breakout strategy
if breakout_in_trade and breakout_enable_atr_trail
    if breakout_trade_type == "BUY"
        // For BUY trades: trail up, never decrease
        breakout_lower_atr_trail := math.max(breakout_lower_atr_trail[1], breakout_long_stop_raw)
    else if breakout_trade_type == "SELL"
        // For SELL trades: trail down, never increase
        breakout_upper_atr_trail := math.min(breakout_upper_atr_trail[1], breakout_short_stop_raw)

// Update legacy ATR trailing SL for breakout (backward compatibility)
if breakout_in_trade and breakout_sl_type == "ATR Trailing" and not breakout_enable_atr_trail
    if breakout_trade_type == "BUY"
        if TS > breakout_entry_price
            breakout_stop_loss := TS
    else if breakout_trade_type == "SELL"
        if TS < breakout_entry_price
            breakout_stop_loss := TS

// TBH Entry Logic with ATR Trailing
if tbh_buy_condition and not tbh_in_trade
    tbh_in_trade := true
    tbh_trade_type := "BUY"
    tbh_entry_price := normal_close
    tbh_entry_bar_index := bar_index
    tbh_entry_candle_low := low
    tbh_entry_candle_high := high
    tbh_atr_trail_activated := false
    tbh_using_fixed_tp := (tbh_tp_mode == "Fixed TP")
    
    // Initialize ATR trailing for BUY
    if tbh_enable_atr_trail
        tbh_lower_atr_trail := tbh_long_stop_raw
        tbh_upper_atr_trail := na
    
    // Set initial SL based on type
    if tbh_initial_sl_type == "Fixed Points"
        tbh_initial_sl := tbh_entry_price - tbh_fixed_sl_points
    else if tbh_initial_sl_type == "Entry Candle Low"
        tbh_initial_sl := tbh_entry_candle_low - tbh_entry_candle_buffer
    
    // Set TP based on mode
    if tbh_using_fixed_tp
        tbh_take_profit := tbh_entry_price + tbh_fixed_tp_points
    else
        tbh_take_profit := na  // No fixed TP for ATR trailing mode
    
    // Start with initial SL or ATR trail
    tbh_current_sl := tbh_enable_atr_trail ? tbh_lower_atr_trail : tbh_initial_sl

if tbh_sell_condition and not tbh_in_trade
    tbh_in_trade := true
    tbh_trade_type := "SELL"
    tbh_entry_price := normal_close
    tbh_entry_bar_index := bar_index
    tbh_entry_candle_low := low
    tbh_entry_candle_high := high
    tbh_atr_trail_activated := false
    tbh_using_fixed_tp := (tbh_tp_mode == "Fixed TP")
    
    // Initialize ATR trailing for SELL
    if tbh_enable_atr_trail
        tbh_upper_atr_trail := tbh_short_stop_raw
        tbh_lower_atr_trail := na
    
    // Set initial SL based on type
    if tbh_initial_sl_type == "Fixed Points"
        tbh_initial_sl := tbh_entry_price + tbh_fixed_sl_points
    else if tbh_initial_sl_type == "Entry Candle Low"
        tbh_initial_sl := tbh_entry_candle_high + tbh_entry_candle_buffer
    
    // Set TP based on mode
    if tbh_using_fixed_tp
        tbh_take_profit := tbh_entry_price - tbh_fixed_tp_points
    else
        tbh_take_profit := na  // No fixed TP for ATR trailing mode
    
    // Start with initial SL or ATR trail
    tbh_current_sl := tbh_enable_atr_trail ? tbh_upper_atr_trail : tbh_initial_sl

// Update ATR trailing stops for TBH strategy
if tbh_in_trade and tbh_enable_atr_trail
    if tbh_trade_type == "BUY"
        // For BUY trades: trail up, never decrease
        tbh_lower_atr_trail := math.max(tbh_lower_atr_trail[1], tbh_long_stop_raw)
        tbh_current_sl := tbh_lower_atr_trail
    else if tbh_trade_type == "SELL"
        // For SELL trades: trail down, never increase
        tbh_upper_atr_trail := math.min(tbh_upper_atr_trail[1], tbh_short_stop_raw)
        tbh_current_sl := tbh_upper_atr_trail

// ═════════════════════════════════════════════════════════════════
// TBH DUAL MODE TRAILING MANAGEMENT - FIXED TP OR ATR TRAILING
// ═════════════════════════════════════════════════════════════════

if tbh_in_trade and bar_index > tbh_entry_bar_index and not tbh_315_exit
    
    if tbh_using_fixed_tp
        // FIXED TP MODE - Traditional TP/SL logic (no trailing)
        if tbh_trade_type == "BUY"
            if normal_low <= tbh_current_sl
                tbh_sl_hit := true
                tbh_in_trade := false
                tbh_trade_points_sl := tbh_entry_price - tbh_current_sl
            else if normal_high >= tbh_take_profit
                tbh_tp_hit := true
                tbh_in_trade := false
                tbh_trade_points_tp := tbh_take_profit - tbh_entry_price
        else if tbh_trade_type == "SELL"
            if normal_high >= tbh_current_sl
                tbh_sl_hit := true
                tbh_in_trade := false
                tbh_trade_points_sl := tbh_current_sl - tbh_entry_price
            else if normal_low <= tbh_take_profit
                tbh_tp_hit := true
                tbh_in_trade := false
                tbh_trade_points_tp := tbh_entry_price - tbh_take_profit
    else
        // ATR TRAILING MODE - ATR-based trailing logic
        if tbh_enable_atr_trail
            if tbh_trade_type == "BUY"
                // Exit BUY when price crosses BELOW the ATR trailing line
                if normal_low <= tbh_lower_atr_trail and normal_close < tbh_lower_atr_trail
                    exit_price = normal_close
                    if exit_price > tbh_entry_price
                        tbh_tp_hit := true
                        tbh_trade_points_tp := exit_price - tbh_entry_price
                    else
                        tbh_sl_hit := true
                        tbh_trade_points_sl := tbh_entry_price - exit_price
                    tbh_in_trade := false
            else if tbh_trade_type == "SELL"
                // Exit SELL when price crosses ABOVE the ATR trailing line
                if normal_high >= tbh_upper_atr_trail and normal_close > tbh_upper_atr_trail
                    exit_price = normal_close
                    if exit_price < tbh_entry_price
                        tbh_tp_hit := true
                        tbh_trade_points_tp := tbh_entry_price - exit_price
                    else
                        tbh_sl_hit := true
                        tbh_trade_points_sl := exit_price - tbh_entry_price
                    tbh_in_trade := false
        else
            // Legacy Supertrend trailing logic (backward compatibility)
            if not tbh_atr_trail_activated
                if tbh_trade_type == "BUY"
                    if tbh_lowerband > tbh_initial_sl
                        tbh_atr_trail_activated := true
                        tbh_current_sl := tbh_lowerband
                else if tbh_trade_type == "SELL"
                    if tbh_upperband < tbh_initial_sl
                        tbh_atr_trail_activated := true
                        tbh_current_sl := tbh_upperband

            if tbh_atr_trail_activated
                if tbh_trade_type == "BUY"
                    if tbh_lowerband > tbh_current_sl
                        tbh_current_sl := tbh_lowerband
                else if tbh_trade_type == "SELL"
                    if tbh_upperband < tbh_current_sl
                        tbh_current_sl := tbh_upperband

            if tbh_atr_trail_activated
                tbh_should_exit = false
                
                if tbh_trade_type == "BUY"
                    if normal_low <= tbh_lowerband and normal_close < tbh_lowerband
                        tbh_should_exit := true
                else if tbh_trade_type == "SELL"
                    if normal_high >= tbh_upperband and normal_close > tbh_upperband
                        tbh_should_exit := true

                if tbh_should_exit
                    exit_price = normal_close
                    if tbh_trade_type == "BUY"
                        if exit_price > tbh_entry_price
                            tbh_tp_hit := true
                            tbh_trade_points_tp := exit_price - tbh_entry_price
                        else
                            tbh_sl_hit := true
                            tbh_trade_points_sl := tbh_entry_price - exit_price
                    else
                        if exit_price < tbh_entry_price
                            tbh_tp_hit := true
                            tbh_trade_points_tp := tbh_entry_price - exit_price
                        else
                            tbh_sl_hit := true
                            tbh_trade_points_sl := exit_price - tbh_entry_price
                    tbh_in_trade := false
            else
                // Use initial SL until trail activates
                if tbh_trade_type == "BUY"
                    if normal_low <= tbh_current_sl
                        tbh_sl_hit := true
                        tbh_in_trade := false
                        tbh_trade_points_sl := tbh_entry_price - tbh_current_sl
                else if tbh_trade_type == "SELL"
                    if normal_high >= tbh_current_sl
                        tbh_sl_hit := true
                        tbh_in_trade := false
                        tbh_trade_points_sl := tbh_current_sl - tbh_entry_price

// Breakout Exit Logic with ATR Trailing
if breakout_in_trade and bar_index > breakout_entry_bar_index and not breakout_315_exit
    if breakout_enable_atr_trail
        if breakout_trade_type == "BUY"
            // Exit BUY when price crosses BELOW the ATR trailing line
            if normal_low <= breakout_lower_atr_trail and normal_close < breakout_lower_atr_trail
                exit_price = normal_close
                if exit_price > breakout_entry_price
                    breakout_tp_hit_alert := true
                    breakout_trade_points_tp := exit_price - breakout_entry_price
                else
                    breakout_sl_hit_alert := true
                    breakout_trade_points_sl := breakout_entry_price - exit_price
                breakout_in_trade := false
        else if breakout_trade_type == "SELL"
            // Exit SELL when price crosses ABOVE the ATR trailing line
            if normal_high >= breakout_upper_atr_trail and normal_close > breakout_upper_atr_trail
                exit_price = normal_close
                if exit_price < breakout_entry_price
                    breakout_tp_hit_alert := true
                    breakout_trade_points_tp := breakout_entry_price - exit_price
                else
                    breakout_sl_hit_alert := true
                    breakout_trade_points_sl := exit_price - breakout_entry_price
                breakout_in_trade := false
    else
        // Legacy exit logic for fixed/legacy ATR modes
        if breakout_trade_type == "BUY"
            if normal_low <= breakout_stop_loss
                breakout_sl_hit_alert := true
                breakout_trade_points_sl := breakout_entry_price - normal_close
                breakout_in_trade := false
            else if is_auto_tp_time
                breakout_auto_tp_hit_alert := true
                breakout_trade_points_tp := normal_close - breakout_entry_price
                breakout_in_trade := false
        else if breakout_trade_type == "SELL"
            if normal_high >= breakout_stop_loss
                breakout_sl_hit_alert := true
                breakout_trade_points_sl := normal_close - breakout_entry_price
                breakout_in_trade := false
            else if is_auto_tp_time
                breakout_auto_tp_hit_alert := true
                breakout_trade_points_tp := breakout_entry_price - normal_close
                breakout_in_trade := false

// BB Exit Logic (unchanged)
if bb_in_trade and bar_index > bb_entry_bar_index
    if bb_trade_type == "BUY"
        if normal_low <= bb_stop_loss
            // Add performance tracking here
            array.push(combined_trade_months, month(time))
            array.push(combined_trade_years, year(time))
            array.push(combined_trade_was_tp, false)
            array.push(combined_trade_points, math.abs(bb_entry_price - bb_stop_loss))
            array.push(combined_trade_strategy, "BB")
            
            bb_sl_count += 1
            combined_total_sl_count += 1
            combined_total_sl_points += math.abs(bb_entry_price - bb_stop_loss)
            bb_in_trade := false
        else if normal_high >= bb_take_profit
            // Add performance tracking here
            array.push(combined_trade_months, month(time))
            array.push(combined_trade_years, year(time))
            array.push(combined_trade_was_tp, true)
            array.push(combined_trade_points, math.abs(bb_take_profit - bb_entry_price))
            array.push(combined_trade_strategy, "BB")
            
            bb_tp_count += 1
            combined_total_tp_count += 1
            combined_total_tp_points += math.abs(bb_take_profit - bb_entry_price)
            bb_in_trade := false

// 3:15 PM Exit Logic
if enable_315_exit and isAfter315PM()
    if bb_in_trade
        bb_in_trade := false
    if breakout_in_trade
        breakout_315_exit := true
        breakout_in_trade := false
    if tbh_in_trade
        tbh_315_exit := true
        tbh_in_trade := false

// Performance tracking updates - ONLY ON CONFIRMED BARS
if barstate.isconfirmed
    if tbh_tp_hit
        array.push(combined_trade_months, month(time))
        array.push(combined_trade_years, year(time))
        array.push(combined_trade_was_tp, true)
        array.push(combined_trade_points, math.abs(tbh_trade_points_tp))
        array.push(combined_trade_strategy, "TBH")
        
        combined_total_tp_count += 1
        combined_total_tp_points += math.abs(tbh_trade_points_tp)
        tbh_tp_count += 1
        current_sl_streak := 0
        current_sl_streak_points := 0.0
        tbh_tp_hit := false

    if tbh_sl_hit
        array.push(combined_trade_months, month(time))
        array.push(combined_trade_years, year(time))
        array.push(combined_trade_was_tp, false)
        array.push(combined_trade_points, math.abs(tbh_trade_points_sl))
        array.push(combined_trade_strategy, "TBH")
        
        combined_total_sl_count += 1
        combined_total_sl_points += math.abs(tbh_trade_points_sl)
        tbh_sl_count += 1
        current_sl_streak += 1
        current_sl_streak_points += math.abs(tbh_trade_points_sl)
        if current_sl_streak > max_sl_streak
            max_sl_streak := current_sl_streak
            max_sl_streak_points := current_sl_streak_points
        tbh_sl_hit := false

    if breakout_tp_hit_alert
        array.push(combined_trade_months, month(time))
        array.push(combined_trade_years, year(time))
        array.push(combined_trade_was_tp, true)
        array.push(combined_trade_points, math.abs(breakout_trade_points_tp))
        array.push(combined_trade_strategy, "BREAKOUT")
        
        combined_total_tp_count += 1
        combined_total_tp_points += math.abs(breakout_trade_points_tp)
        breakout_tp_count += 1
        current_sl_streak := 0
        current_sl_streak_points := 0.0
        breakout_tp_hit_alert := false

    if breakout_sl_hit_alert
        array.push(combined_trade_months, month(time))
        array.push(combined_trade_years, year(time))
        array.push(combined_trade_was_tp, false)
        array.push(combined_trade_points, math.abs(breakout_trade_points_sl))
        array.push(combined_trade_strategy, "BREAKOUT")
        
        combined_total_sl_count += 1
        combined_total_sl_points += math.abs(breakout_trade_points_sl)
        breakout_sl_count += 1
        current_sl_streak += 1
        current_sl_streak_points += math.abs(breakout_trade_points_sl)
        if current_sl_streak > max_sl_streak
            max_sl_streak := current_sl_streak
            max_sl_streak_points := current_sl_streak_points
        breakout_sl_hit_alert := false

// ═════════════════════════════════════════════════════════════════
// PERFORMANCE TABLE DISPLAY
// ═════════════════════════════════════════════════════════════════

if barstate.islast and show_performance_table
    current_month = month(time)
    current_year = year(time)
    
    var performanceTable = table.new(getTablePosition(table_position), 12, 16, bgcolor=color.new(color.black, 20), border_width=1)
    
    // Header row
    table.cell(performanceTable, 0, 0, 'Month & Year', text_color=color.white, text_size=size.small, bgcolor=color.new(color.blue, 60))
    table.cell(performanceTable, 1, 0, 'TP Trades', text_color=color.white, text_size=size.small, bgcolor=color.new(color.green, 60))
    table.cell(performanceTable, 2, 0, 'SL Trades', text_color=color.white, text_size=size.small, bgcolor=color.new(color.red, 60))
    table.cell(performanceTable, 3, 0, 'TP Points', text_color=color.white, text_size=size.small, bgcolor=color.new(color.lime, 60))
    table.cell(performanceTable, 4, 0, 'SL Points', text_color=color.white, text_size=size.small, bgcolor=color.new(color.maroon, 60))
    table.cell(performanceTable, 5, 0, 'Net Points', text_color=color.white, text_size=size.small, bgcolor=color.new(color.purple, 60))
    table.cell(performanceTable, 6, 0, 'Win Rate %', text_color=color.white, text_size=size.small, bgcolor=color.new(color.teal, 60))
    table.cell(performanceTable, 7, 0, 'Profit Factor', text_color=color.white, text_size=size.small, bgcolor=color.new(color.aqua, 60))
    table.cell(performanceTable, 8, 0, 'PNL (₹)', text_color=color.white, text_size=size.small, bgcolor=color.new(color.yellow, 60))
    table.cell(performanceTable, 9, 0, 'BB Trades', text_color=color.white, text_size=size.small, bgcolor=color.new(color.blue, 60))
    table.cell(performanceTable, 10, 0, 'BREAKOUT', text_color=color.white, text_size=size.small, bgcolor=color.new(color.orange, 60))
    table.cell(performanceTable, 11, 0, 'TBH Trades', text_color=color.white, text_size=size.small, bgcolor=color.new(color.lime, 60))
    
    grand_tp_trades = 0
    grand_sl_trades = 0
    grand_tp_points = 0.0
    grand_sl_points = 0.0
    
    // Display last 12 months
    for i = 0 to 11
        row = i + 1
        
        target_month = ((current_month - 12 + i) % 12)
        if target_month <= 0
            target_month := target_month + 12
        
        target_year = target_month > current_month ? current_year - 1 : current_year
        
        // Count trades for this month/year
        month_tp_trades = 0
        month_sl_trades = 0
        month_tp_points = 0.0
        month_sl_points = 0.0
        
        if array.size(combined_trade_months) > 0
            for j = 0 to array.size(combined_trade_months) - 1
                trade_month = array.get(combined_trade_months, j)
                trade_year = array.get(combined_trade_years, j)
                
                if trade_month == target_month and trade_year == target_year
                    was_tp = array.get(combined_trade_was_tp, j)
                    points = array.get(combined_trade_points, j)
                    
                    if was_tp
                        month_tp_trades := month_tp_trades + 1
                        month_tp_points := month_tp_points + points
                    else
                        month_sl_trades := month_sl_trades + 1
                        month_sl_points := month_sl_points + points
        
        // Calculations
        net_pts = month_tp_points - month_sl_points
        win_rate = calculateWinRate(month_tp_trades, month_sl_trades)
        profit_factor = month_sl_points > 0 ? math.round(month_tp_points / month_sl_points, 2) : (month_tp_points > 0 ? 999.99 : 0.0)
        option_pts = math.round(net_pts * 0.372)
        pnl = math.round(option_pts * 525)
        
        // Update grand totals
        grand_tp_trades := grand_tp_trades + month_tp_trades
        grand_sl_trades := grand_sl_trades + month_sl_trades
        grand_tp_points := grand_tp_points + month_tp_points
        grand_sl_points := grand_sl_points + month_sl_points
        
        month_name_with_year = getMonthNameWithYear(target_month, target_year)
        
        // Fill table cells
        table.cell(performanceTable, 0, row, month_name_with_year, text_color=color.white, text_size=size.small)
        table.cell(performanceTable, 1, row, str.tostring(month_tp_trades), text_color=color.white, text_size=size.small)
        table.cell(performanceTable, 2, row, str.tostring(month_sl_trades), text_color=color.white, text_size=size.small)
        table.cell(performanceTable, 3, row, str.tostring(math.round(month_tp_points)), text_color=color.white, text_size=size.small)
        table.cell(performanceTable, 4, row, str.tostring(math.round(month_sl_points)), text_color=color.white, text_size=size.small)
        table.cell(performanceTable, 5, row, str.tostring(math.round(net_pts)), text_color=color.white, text_size=size.small)
        table.cell(performanceTable, 6, row, str.tostring(win_rate) + "%", text_color=color.white, text_size=size.small)
        table.cell(performanceTable, 7, row, str.tostring(profit_factor), text_color=color.white, text_size=size.small)
        table.cell(performanceTable, 8, row, str.tostring(pnl), text_color=color.white, text_size=size.small)
        table.cell(performanceTable, 9, row, str.tostring(0), text_color=color.white, text_size=size.small)
        table.cell(performanceTable, 10, row, str.tostring(0), text_color=color.white, text_size=size.small)
        table.cell(performanceTable, 11, row, str.tostring(0), text_color=color.white, text_size=size.small)
    
    // Total row
    grand_net_pts = grand_tp_points - grand_sl_points
    grand_win_rate = calculateWinRate(grand_tp_trades, grand_sl_trades)
    grand_profit_factor = grand_sl_points > 0 ? math.round(grand_tp_points / grand_sl_points, 2) : (grand_tp_points > 0 ? 999.99 : 0.0)
    grand_option_pts = math.round(grand_net_pts * 0.372)
    grand_pnl = math.round(grand_option_pts * 525)
    
    table.cell(performanceTable, 0, 13, 'TOTAL', text_color=color.white, text_size=size.small, bgcolor=color.new(color.purple, 60))
    table.cell(performanceTable, 1, 13, str.tostring(grand_tp_trades), text_color=color.white, text_size=size.small, bgcolor=color.new(color.purple, 60))
    table.cell(performanceTable, 2, 13, str.tostring(grand_sl_trades), text_color=color.white, text_size=size.small, bgcolor=color.new(color.purple, 60))
    table.cell(performanceTable, 3, 13, str.tostring(math.round(grand_tp_points)), text_color=color.white, text_size=size.small, bgcolor=color.new(color.purple, 60))
    table.cell(performanceTable, 4, 13, str.tostring(math.round(grand_sl_points)), text_color=color.white, text_size=size.small, bgcolor=color.new(color.purple, 60))
    table.cell(performanceTable, 5, 13, str.tostring(math.round(grand_net_pts)), text_color=color.white, text_size=size.small, bgcolor=color.new(color.purple, 60))
    table.cell(performanceTable, 6, 13, str.tostring(grand_win_rate) + "%", text_color=color.white, text_size=size.small, bgcolor=color.new(color.purple, 60))
    table.cell(performanceTable, 7, 13, str.tostring(grand_profit_factor), text_color=color.white, text_size=size.small, bgcolor=color.new(color.purple, 60))
    table.cell(performanceTable, 8, 13, str.tostring(grand_pnl), text_color=color.white, text_size=size.small, bgcolor=color.new(color.purple, 60))
    table.cell(performanceTable, 9, 13, str.tostring(bb_tp_count + bb_sl_count), text_color=color.white, text_size=size.small, bgcolor=color.new(color.purple, 60))
    table.cell(performanceTable, 10, 13, str.tostring(breakout_tp_count + breakout_sl_count), text_color=color.white, text_size=size.small, bgcolor=color.new(color.purple, 60))
    table.cell(performanceTable, 11, 13, str.tostring(tbh_tp_count + tbh_sl_count), text_color=color.white, text_size=size.small, bgcolor=color.new(color.purple, 60))
    
    // Strategy Summary Row
    table.cell(performanceTable, 0, 14, 'NIFTY-3-STRATEGIES', text_color=color.white, text_size=size.small, bgcolor=color.new(color.gray, 60))
    table.cell(performanceTable, 1, 14, 'TP: ' + str.tostring(combined_total_tp_count), text_color=color.white, text_size=size.small, bgcolor=color.new(color.green, 60))
    table.cell(performanceTable, 2, 14, 'SL: ' + str.tostring(combined_total_sl_count), text_color=color.white, text_size=size.small, bgcolor=color.new(color.red, 60))
    table.cell(performanceTable, 3, 14, 'BIAS: ' + current_nifty_bias, text_color=color.white, text_size=size.small, bgcolor=color.new(color.blue, 60))
    table.cell(performanceTable, 4, 14, getBiasSpreadInfo(), text_color=color.white, text_size=size.small, bgcolor=color.new(color.orange, 60))
    table.cell(performanceTable, 5, 14, 'ATR-TRAIL', text_color=color.white, text_size=size.small, bgcolor=color.new(color.teal, 60))
    table.cell(performanceTable, 6, 14, 'CANDLE-CLOSE', text_color=color.white, text_size=size.small, bgcolor=color.new(color.lime, 60))
    table.cell(performanceTable, 7, 14, user_login, text_color=color.white, text_size=size.small, bgcolor=color.new(color.navy, 60))
    table.cell(performanceTable, 8, 14, getCurrentTimestamp(), text_color=color.white, text_size=size.small, bgcolor=color.new(color.maroon, 60))
    table.cell(performanceTable, 9, 14, 'BB:' + str.tostring(bb_tp_count) + '/' + str.tostring(bb_sl_count), text_color=color.white, text_size=size.small, bgcolor=color.new(color.blue, 60))
    table.cell(performanceTable, 10, 14, 'BO:' + str.tostring(breakout_tp_count) + '/' + str.tostring(breakout_sl_count), text_color=color.white, text_size=size.small, bgcolor=color.new(color.orange, 60))
    table.cell(performanceTable, 11, 14, 'TBH:' + str.tostring(tbh_tp_count) + '/' + str.tostring(tbh_sl_count), text_color=color.white, text_size=size.small, bgcolor=color.new(color.lime, 60))

    // Bias and Coverage Info Row
    table.cell(performanceTable, 0, 15, 'BIAS-INFO', text_color=color.white, text_size=size.small, bgcolor=color.new(color.gray, 60))
    table.cell(performanceTable, 1, 15, getBiasThresholdInfo(), text_color=color.white, text_size=size.small, bgcolor=color.new(color.blue, 60))
    table.cell(performanceTable, 2, 15, getBiasCoverageInfo(), text_color=color.white, text_size=size.small, bgcolor=color.new(color.teal, 60))
    table.cell(performanceTable, 3, 15, 'SL-STREAK: ' + str.tostring(max_sl_streak), text_color=color.white, text_size=size.small, bgcolor=color.new(color.red, 60))
    table.cell(performanceTable, 4, 15, 'MAX-SL-PTS: ' + str.tostring(math.round(max_sl_streak_points)), text_color=color.white, text_size=size.small, bgcolor=color.new(color.maroon, 60))
    table.cell(performanceTable, 5, 15, 'UPDATED', text_color=color.white, text_size=size.small, bgcolor=color.new(color.green, 60))
    table.cell(performanceTable, 6, 15, 'ENHANCED', text_color=color.white, text_size=size.small, bgcolor=color.new(color.purple, 60))
    table.cell(performanceTable, 7, 15, 'V6-SYSTEM', text_color=color.white, text_size=size.small, bgcolor=color.new(color.aqua, 60))

// ═════════════════════════════════════════════════════════════════
// VISUAL PLOTTING AND SIGNALS
// ═════════════════════════════════════════════════════════════════

// Plot Bollinger Bands (optional)
plot(show_bb_lines ? bb_upper : na, color=color.blue, linewidth=1, title="BB Upper")
plot(show_bb_lines ? bb_lower : na, color=color.blue, linewidth=1, title="BB Lower")
plot(show_bb_lines ? bb_basis : na, color=color.gray, linewidth=1, title="BB Basis")

// Plot Fibonacci levels for TBH (optional)
plot(show_tbh_fibs ? tbh_fib_level_0 : na, color=color.orange, linewidth=1, title="TBH Fib 0")
plot(show_tbh_fibs ? tbh_fib_level_1 : na, color=color.yellow, linewidth=1, title="TBH Fib 1")

// Plot legacy Supertrend for TBH (optional)
plot(show_tbh_supertrend ? tbh_supertrend : na, color=tbh_direction == -1 ? color.green : color.red, linewidth=2, title="TBH Legacy Supertrend")

// Plot ATR trailing lines
plot(tbh_in_trade and tbh_trade_type == "BUY" and tbh_enable_atr_trail and show_tbh_atr_trail ? tbh_lower_atr_trail : na, 
     color=color.orange, linewidth=2, title="TBH ATR Lower Trail")
plot(tbh_in_trade and tbh_trade_type == "SELL" and tbh_enable_atr_trail and show_tbh_atr_trail ? tbh_upper_atr_trail : na, 
     color=color.fuchsia, linewidth=2, title="TBH ATR Upper Trail")

plot(breakout_in_trade and breakout_trade_type == "BUY" and breakout_enable_atr_trail ? breakout_lower_atr_trail : na, 
     color=color.lime, linewidth=2, title="Breakout ATR Lower Trail")
plot(breakout_in_trade and breakout_trade_type == "SELL" and breakout_enable_atr_trail ? breakout_upper_atr_trail : na, 
     color=color.red, linewidth=2, title="Breakout ATR Upper Trail")

// Entry signals - ONLY SHOWN ON CONFIRMED BARS
plotshape(bb_buy_entry and show_bb_signals, title='BB Buy Signal', style=shape.labelup, location=location.belowbar, color=color.blue, text='BB\nBUY', textcolor=color.white, size=size.small)
plotshape(bb_sell_entry and show_bb_signals, title='BB Sell Signal', style=shape.labeldown, location=location.abovebar, color=color.blue, text='BB\nSELL', textcolor=color.white, size=size.small)

plotshape(bullish_breakout, title='Breakout Buy Signal', style=shape.labelup, location=location.belowbar, color=color.orange, text='BO\nBUY', textcolor=color.white, size=size.small)
plotshape(bearish_breakdown, title='Breakout Sell Signal', style=shape.labeldown, location=location.abovebar, color=color.orange, text='BO\nSELL', textcolor=color.white, size=size.small)

plotshape(tbh_buy_condition, title='TBH Buy Signal', style=shape.labelup, location=location.belowbar, color=color.green, text='TBH\nBUY', textcolor=color.white, size=size.small)
plotshape(tbh_sell_condition, title='TBH Sell Signal', style=shape.labeldown, location=location.abovebar, color=color.red, text='TBH\nSELL', textcolor=color.white, size=size.small)

// Exit labels
atr_value = ta.atr(20) * 2

if tbh_tp_hit 
    actual_tp_points = math.abs(tbh_trade_points_tp)
    label_y = tbh_trade_type == "BUY" ? high + atr_value : low - atr_value
    label_style = tbh_trade_type == "BUY" ? label.style_label_down : label.style_label_up
    exit_type = tbh_enable_atr_trail ? "ATR" : "LEGACY"
    
    label.new(x=bar_index, y=label_y, text="✅ TBH " + exit_type + " TP +" + str.tostring(math.round(actual_tp_points, 1)) + " pts", 
              style=label_style, color=color.new(color.green, 0), textcolor=color.white, size=size.small)

if tbh_sl_hit 
    actual_sl_points = math.abs(tbh_trade_points_sl)
    label_y = tbh_trade_type == "BUY" ? low - atr_value : high + atr_value
    label_style = tbh_trade_type == "BUY" ? label.style_label_up : label.style_label_down
    exit_type = tbh_enable_atr_trail ? "ATR" : "LEGACY"
    
    label.new(x=bar_index, y=label_y, text="❌ TBH " + exit_type + " SL -" + str.tostring(math.round(actual_sl_points, 1)) + " pts", 
              style=label_style, color=color.new(color.red, 0), textcolor=color.white, size=size.small)

if breakout_tp_hit_alert 
    actual_tp_points = math.abs(breakout_trade_points_tp)
    label_y = breakout_trade_type == "BUY" ? high + atr_value : low - atr_value
    label_style = breakout_trade_type == "BUY" ? label.style_label_down : label.style_label_up
    exit_type = breakout_enable_atr_trail ? "ATR" : "LEGACY"
    
    label.new(x=bar_index, y=label_y, text="✅ BO " + exit_type + " TP +" + str.tostring(math.round(actual_tp_points, 1)) + " pts", 
              style=label_style, color=color.new(color.orange, 0), textcolor=color.white, size=size.small)

if breakout_sl_hit_alert 
    actual_sl_points = math.abs(breakout_trade_points_sl)
    label_y = breakout_trade_type == "BUY" ? low - atr_value : high + atr_value
    label_style = breakout_trade_type == "BUY" ? label.style_label_up : label.style_label_down
    exit_type = breakout_enable_atr_trail ? "ATR" : "LEGACY"
    
    label.new(x=bar_index, y=label_y, text="❌ BO " + exit_type + " SL -" + str.tostring(math.round(actual_sl_points, 1)) + " pts", 
              style=label_style, color=color.new(color.red, 0), textcolor=color.white, size=size.small)

// Background highlighting for active trades
bgcolor(bb_in_trade and bb_trade_type == "BUY" ? color.new(color.blue, 95) : na, title="BB Buy Trade Active")
bgcolor(bb_in_trade and bb_trade_type == "SELL" ? color.new(color.blue, 95) : na, title="BB Sell Trade Active")
bgcolor(breakout_in_trade and breakout_trade_type == "BUY" ? color.new(color.orange, 95) : na, title="Breakout Buy Trade Active")
bgcolor(breakout_in_trade and breakout_trade_type == "SELL" ? color.new(color.orange, 95) : na, title="Breakout Sell Trade Active")
bgcolor(tbh_in_trade and tbh_trade_type == "BUY" ? color.new(color.green, 95) : na, title="TBH Buy Trade Active")
bgcolor(tbh_in_trade and tbh_trade_type == "SELL" ? color.new(color.red, 95) : na, title="TBH Sell Trade Active")

// ═════════════════════════════════════════════════════════════════
// ALERTS - ONLY TRIGGERED ON CONFIRMED BARS
// ═════════════════════════════════════════════════════════════════

if barstate.isconfirmed
    if bb_buy_entry and bb_enable_alerts
        alert("BB BUY SIGNAL: Entry at " + str.tostring(normal_close, "#.##") + " | SL: " + str.tostring(bb_stop_loss, "#.##") + " | TP: " + str.tostring(bb_take_profit, "#.##") + " | Method: " + bb_sl_method + " | Time: " + getCurrentTimestamp(), alert.freq_once_per_bar)
    
    if bb_sell_entry and bb_enable_alerts
        alert("BB SELL SIGNAL: Entry at " + str.tostring(normal_close, "#.##") + " | SL: " + str.tostring(bb_stop_loss, "#.##") + " | TP: " + str.tostring(bb_take_profit, "#.##") + " | Method: " + bb_sl_method + " | Time: " + getCurrentTimestamp(), alert.freq_once_per_bar)
    
    if bullish_breakout and breakout_enable_alerts
        trail_info = breakout_enable_atr_trail ? " | ATR Trailing: ENABLED" : " | Legacy SL Mode"
        alert("BREAKOUT BUY SIGNAL: Entry at " + str.tostring(normal_close, "#.##") + trail_info + " | Time: " + getCurrentTimestamp(), alert.freq_once_per_bar)
    
    if bearish_breakdown and breakout_enable_alerts
        trail_info = breakout_enable_atr_trail ? " | ATR Trailing: ENABLED" : " | Legacy SL Mode"
        alert("BREAKOUT SELL SIGNAL: Entry at " + str.tostring(normal_close, "#.##") + trail_info + " | Time: " + getCurrentTimestamp(), alert.freq_once_per_bar)
    
    if tbh_buy_condition and tbh_enable_alerts
        trail_info = tbh_enable_atr_trail ? " | ATR Trailing: ENABLED" : " | Legacy Supertrend Mode"
        alert("TBH BUY SIGNAL: Entry at " + str.tostring(normal_close, "#.##") + trail_info + " | Time: " + getCurrentTimestamp(), alert.freq_once_per_bar)
    
    if tbh_sell_condition and tbh_enable_alerts
        trail_info = tbh_enable_atr_trail ? " | ATR Trailing: ENABLED" : " | Legacy Supertrend Mode"
        alert("TBH SELL SIGNAL: Entry at " + str.tostring(normal_close, "#.##") + trail_info + " | Time: " + getCurrentTimestamp(), alert.freq_once_per_bar)
    
    if tbh_tp_hit and tbh_enable_alerts
        exit_type = tbh_enable_atr_trail ? "ATR TRAILING" : "LEGACY"
        alert("TBH TAKE PROFIT (" + exit_type + "): Position closed with profit at " + str.tostring(normal_close, "#.##") + " | Points: +" + str.tostring(math.abs(tbh_trade_points_tp), "#.##") + " | Time: " + getCurrentTimestamp(), alert.freq_once_per_bar)
    
    if tbh_sl_hit and tbh_enable_alerts
        exit_type = tbh_enable_atr_trail ? "ATR TRAILING" : "LEGACY"
        alert("TBH STOP LOSS (" + exit_type + "): Position closed with loss at " + str.tostring(normal_close, "#.##") + " | Points: -" + str.tostring(math.abs(tbh_trade_points_sl), "#.##") + " | Time: " + getCurrentTimestamp(), alert.freq_once_per_bar)
    
    if breakout_tp_hit_alert and breakout_enable_alerts
        exit_type = breakout_enable_atr_trail ? "ATR TRAILING" : "LEGACY"
        alert("BREAKOUT TAKE PROFIT (" + exit_type + "): Position closed with profit at " + str.tostring(normal_close, "#.##") + " | Points: +" + str.tostring(math.abs(breakout_trade_points_tp), "#.##") + " | Time: " + getCurrentTimestamp(), alert.freq_once_per_bar)
    
    if breakout_sl_hit_alert and breakout_enable_alerts
        exit_type = breakout_enable_atr_trail ? "ATR TRAILING" : "LEGACY"
        alert("BREAKOUT STOP LOSS (" + exit_type + "): Position closed with loss at " + str.tostring(normal_close, "#.##") + " | Points: -" + str.tostring(math.abs(breakout_trade_points_sl), "#.##") + " | Time: " + getCurrentTimestamp(), alert.freq_once_per_bar)

// Alert Conditions - ONLY TRIGGERED ON CONFIRMED BARS
alertcondition(bb_buy_entry and barstate.isconfirmed, 'BB Buy Signal', 'BB Buy Signal Triggered')
alertcondition(bb_sell_entry and barstate.isconfirmed, 'BB Sell Signal', 'BB Sell Signal Triggered')
alertcondition(bullish_breakout and barstate.isconfirmed, 'Breakout Buy Signal', 'Breakout Buy Signal Triggered')
alertcondition(bearish_breakdown and barstate.isconfirmed, 'Breakout Sell Signal', 'Breakout Sell Signal Triggered')
alertcondition(tbh_buy_condition and barstate.isconfirmed, 'TBH Buy Signal', 'TBH Buy Signal Triggered')
alertcondition(tbh_sell_condition and barstate.isconfirmed, 'TBH Sell Signal', 'TBH Sell Signal Triggered')
alertcondition(tbh_tp_hit and barstate.isconfirmed, 'TBH Take Profit', 'TBH Take Profit Hit')
alertcondition(tbh_sl_hit and barstate.isconfirmed, 'TBH Stop Loss', 'TBH Stop Loss Hit')
alertcondition(breakout_tp_hit_alert and barstate.isconfirmed, 'Breakout Take Profit', 'Breakout Take Profit Hit')
alertcondition(breakout_sl_hit_alert and barstate.isconfirmed, 'Breakout Stop Loss', 'Breakout Stop Loss Hit')
